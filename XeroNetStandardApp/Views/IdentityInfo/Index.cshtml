@model XeroNetStandardApp.Models.EndpointControlPanelViewModel
@using System.Text.Json
@{
    ViewBag.Title = "Endpoint Control Panel";
}

<h3>Last Run Summary</h3>
<table class="table table-sm">
    <thead>
        <tr>
            <th>Organisation</th>
            <th>Last Call (UTC)</th>
            <th>Successes</th>
            <th>Failures</th>
            <th>Rows Inserted</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in Model.Tenants)
        {
            if (Model.Stats.TryGetValue(t.TenantId!, out var s))
            {
                <tr>
                    <td>@t.OrgName</td>
                    <td>@s.LastCall.ToString("g")</td>
                    <td>@s.EndpointsSuccess</td>
                    <td>@s.EndpointsFail</td>
                    <td>@s.RecordsInserted</td>
                </tr>
            }
        }
    </tbody>
</table>

<h2>Endpoint Control Panel</h2>

<form asp-action="BulkTrigger" method="post">
    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>Endpoint</th>
                @* one header cell per tenant *@
                @foreach (var tenant in Model.Tenants)
                {
                    <th class="text-center">
                        @tenant.OrgName
                    </th>
                }
            </tr>
            <tr>
                <th>
                    <button type="submit"
                            name="tenantId"
                            value="ALL"
                            class="btn btn-success">
                        Run&nbsp;All&nbsp;Organisations
                    </button>
                </th>
                @foreach (var tenant in Model.Tenants)
                {
                    <th class="text-center">
                        <button type="submit"
                                name="tenantId"
                                value="@tenant.TenantId"
                                class="btn btn-primary btn-sm">
                            Run&nbsp;Selected
                        </button>
                    </th>
                }
            </tr>
            <tr>
                <th></th>
                @* “select all / none” toggle for each column *@
                @foreach (var tenant in Model.Tenants)
                {
                    <th class="text-center">
                        <input type="checkbox"
                               class="js-column-toggle"
                               data-tenant="@tenant.TenantId" />
                        <small>Select&nbsp;All&nbsp;/&nbsp;None</small>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @* grid: row = endpoint, column = tenant *@
            @foreach (var endpoint in Model.Endpoints)
            {
                <tr>
                    <td>@endpoint.DisplayName</td>
                    @foreach (var tenant in Model.Tenants)
                    {
                        <td class="text-center">
                            <input type="checkbox"
                                   name="selected[@tenant.TenantId]"
                                   value="@endpoint.Key"
                                   class="ep-checkbox tenant-@tenant.TenantId" />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</form>

<div id="runProgress" class="position-fixed top-0 start-0 w-100 h-100 d-none align-items-center justify-content-center"
     style="background:rgba(128,128,128,0.5);z-index:1050;">
    <div class="text-center">
        <div class="spinner-border" role="status"></div>
        <div id="runProgressMessage" class="mt-2">Processing...</div>
    </div>
</div>

<div class="modal fade" id="runSummaryModal" tabindex="-1" role="dialog"
     aria-labelledby="runSummaryModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="runSummaryModalLabel">Manual Run Summary</h5>
                <button type="button" class="close" data-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="runSummaryText"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- DOM Elements ---
            const form = document.querySelector('form[asp-action="BulkTrigger"]'); // Target your specific form
            const overlay = document.getElementById('runProgress');
            const overlayMessage = document.getElementById('runProgressMessage');
            const runSummaryModalEl = document.getElementById('runSummaryModal');
            const runSummaryText = document.getElementById('runSummaryText');
            const overlayFlagKey = 'manualRunPending';

            // --- Overlay Control Functions ---
            function showOverlay(message = 'Processing...') {
                if (overlayMessage) {
                    overlayMessage.textContent = message;
                }
                if (overlay) {
                    overlay.classList.remove('d-none');
                }
            }

            function hideOverlay() {
                if (overlay) {
                    overlay.classList.add('d-none');
                }
            }

            // Restore overlay state after redirect if a manual run was initiated
            if (localStorage.getItem(overlayFlagKey) === 'true') {
                showOverlay();
            }

            // --- Column Checkbox Toggles ---
            document.querySelectorAll('.js-column-toggle').forEach(function (toggle) {
                toggle.addEventListener('change', function () {
                    const tid = this.dataset.tenant;
                    document.querySelectorAll('.tenant-' + tid)
                        .forEach(cb => cb.checked = toggle.checked);
                });
            });

            // --- Form Submission: Show overlay immediately ---
            if (form) {
                let alreadySubmitting = false;
                form.addEventListener('submit', function (e) {
                    if (alreadySubmitting) return; // Allow actual submission on second pass
                    e.preventDefault(); // Prevent immediate synchronous submission
                    localStorage.setItem(overlayFlagKey, 'true');
                    showOverlay('Manual data load initiated. Please wait...');

                    const submitter = e.submitter; // The button that triggered the submit event

                    alreadySubmitting = true;
                    // Short timeout to allow DOM update (overlay becoming visible) before form submission
                    setTimeout(() => {
                        if (submitter) {
                            form.requestSubmit(submitter); // Submits the form as if 'submitter' button was clicked
                        } else {
                            // Fallback if e.submitter is not available (e.g., form submitted via Enter key in a field)
                            form.submit();
                        }
                    }, 50); // 50ms delay
                });
            }

            // --- Page Load: Handle RunStatus from TempData, show modal, and manage overlay ---
            var finalMsg = @Html.Raw(JsonSerializer.Serialize(TempData["RunStatus"]));
            // This will set finalMsg to the string from TempData["RunStatus"], or null if not set.

            if (finalMsg && runSummaryModalEl) { // If there's a message and the modal element exists
                // 1. An operation has completed. Show the overlay first.
                showOverlay('Loading summary...');

                // 2. Populate and show the modal
                if (runSummaryText) {
                    runSummaryText.textContent = finalMsg;
                }

                var summaryModalInstance = new bootstrap.Modal(runSummaryModalEl); // Assumes Bootstrap 5+ syntax
                // If using older Bootstrap with jQuery: var summaryModalInstance = $('#runSummaryModal');

                // 3. Event listener to hide overlay when modal is fully hidden
                runSummaryModalEl.addEventListener('hidden.bs.modal', function () {
                    hideOverlay();
                    localStorage.removeItem(overlayFlagKey);
                }, { once: true }); // { once: true } ensures the listener is called only once

                summaryModalInstance.show(); // For Bootstrap 5+
                // If using older Bootstrap with jQuery: summaryModalInstance.modal('show');

            } else {
                // No message - ensure overlay flag is cleared
                localStorage.removeItem(overlayFlagKey);
            }

            // --- LocalStorage for polling data (existing code) ---
            @if (TempData.Keys.Any(k => k.StartsWith("PollLast_")))
            {
                    @foreach (var key in TempData.Keys.Where(k => k.StartsWith("PollLast_")))
                    {
                            var tid = key.Substring("PollLast_".Length);
                            var val = TempData[key];
                            // Use Json.Serialize for robust JavaScript string/object creation
                            <text>localStorage.setItem('pollLast_@tid', @Json.Serialize(val));</text>
                    }
            }

            @if (TempData.Keys.Any(k => k.StartsWith("PollRows_")))
            {
                    @foreach (var key in TempData.Keys.Where(k => k.StartsWith("PollRows_")))
                    {
                            var tid = key.Substring("PollRows_".Length);
                            var val = TempData[key];
                            <text>localStorage.setItem('pollRows_@tid', @Json.Serialize(val));</text>
                    }
            }
        });
    </script>
}
