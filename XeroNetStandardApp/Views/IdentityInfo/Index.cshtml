@model XeroNetStandardApp.Models.EndpointControlPanelViewModel
@using System.Text.Json
@{
    ViewBag.Title = "Endpoint Control Panel";
}

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <h5 class="card-title">Last Run Summary</h5>
        <div class="table-responsive">
            <table class="table table-sm table-striped table-bordered align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Organisation</th>
                        <th>Last Call (UTC)</th>
                        <th>Successes</th>
                        <th>Failures</th>
                        <th>Rows Inserted</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var t in Model.Tenants)
                    {
                        if (Model.Stats.TryGetValue(t.TenantId!, out var s))
                        {
                            <tr>
                                <td>@t.OrgName</td>
                                <td>@s.LastCall.ToString("g")</td>
                                <td>@s.EndpointsSuccess</td>
                                <td>@s.EndpointsFail</td>
                                <td>@s.RecordsInserted</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        <h5 class="card-title mb-3">Manual Endpoint Trigger</h5>
        <form asp-action="BulkTrigger" method="post">
            <div class="table-responsive">
                <table class="table table-sm table-striped table-bordered align-middle">
                    <thead class="table-light">
                        <tr>
                            <th></th> <!-- Was "Endpoint", now empty -->
                            @foreach (var tenant in Model.Tenants)
                            {
                                <th class="text-center">@tenant.OrgName</th>
                            }
                        </tr>
                        <tr>
                            <th>
                                <button type="submit" name="tenantId" value="ALL" class="btn btn-success btn-sm">
                                    Run All
                                </button>
                            </th>
                            @foreach (var tenant in Model.Tenants)
                            {
                                <th class="text-center">
                                    <button type="submit" name="tenantId" value="@tenant.TenantId" class="btn btn-primary btn-sm">
                                        Run Selected
                                    </button>
                                </th>
                            }
                        </tr>
                        <tr>
                            <th>Endpoint</th> <!-- Moved here -->
                            @foreach (var tenant in Model.Tenants)
                            {
                                <th class="text-center">
                                    <input type="checkbox"
                                           class="js-column-toggle"
                                           data-tenant="@tenant.TenantId" />
                                    <small>Select&nbsp;All&nbsp;/&nbsp;None</small>
                                </th>
                            }
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var endpoint in Model.Endpoints)
                        {
                            <tr>
                                <td>@endpoint.DisplayName</td>
                                @foreach (var tenant in Model.Tenants)
                                {
                                    <td class="text-center">
                                        <input type="checkbox"
                                               name="selected[@tenant.TenantId]"
                                               value="@endpoint.Key"
                                               class="form-check-input ep-checkbox tenant-@tenant.TenantId" />
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </form>
    </div>
</div>

<!-- Progress Overlay -->
<div id="runProgress" class="position-fixed top-0 start-0 w-100 h-100 d-none align-items-center justify-content-center bg-dark bg-opacity-50" style="z-index: 1050;">
    <div class="text-center">
        <div class="spinner-border text-light" role="status"></div>
        <div id="runProgressMessage" class="mt-2 text-light">Processing...</div>
    </div>
</div>

<!-- Summary Modal -->
<div class="modal fade" id="runSummaryModal" tabindex="-1" aria-labelledby="runSummaryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header">
                <h5 class="modal-title" id="runSummaryModalLabel">Manual Run Summary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="runSummaryText"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.querySelector('form[asp-action="BulkTrigger"]');
            const overlay = document.getElementById('runProgress');
            const overlayMessage = document.getElementById('runProgressMessage');
            const runSummaryModalEl = document.getElementById('runSummaryModal');
            const runSummaryText = document.getElementById('runSummaryText');
            const overlayFlagKey = 'manualRunPending';

            function showOverlay(message = 'Processing...') {
                if (overlayMessage) overlayMessage.textContent = message;
                if (overlay) overlay.classList.remove('d-none');
            }

            function hideOverlay() {
                if (overlay) overlay.classList.add('d-none');
            }

            document.querySelectorAll('.js-column-toggle').forEach(toggle => {
                toggle.addEventListener('change', function () {
                    const tid = this.dataset.tenant;
                    document.querySelectorAll('.tenant-' + tid)
                        .forEach(cb => cb.checked = toggle.checked);
                });
            });

            if (form) {
                let alreadySubmitting = false;
                form.addEventListener('submit', function (e) {
                    e.preventDefault();
                    showOverlay('Manual data load initiated. Please wait...');
                    setTimeout(() => {
                        if (e.submitter) {
                            form.requestSubmit(e.submitter);
                        } else {
                            form.submit();
                        }
                    }, 50);
                });
            }

            var finalMsg = @Html.Raw(JsonSerializer.Serialize(TempData["RunStatus"]));
            if (finalMsg && runSummaryModalEl) {
                showOverlay('Loading summary...');
                if (runSummaryText) runSummaryText.textContent = finalMsg;
                var summaryModalInstance = new bootstrap.Modal(runSummaryModalEl);
                runSummaryModalEl.addEventListener('hidden.bs.modal', () => hideOverlay(), { once: true });
                summaryModalInstance.show();
            }

            @foreach (var key in TempData.Keys.Where(k => k.StartsWith("PollLast_")))
            {
                    var tid = key.Substring("PollLast_".Length);
                    var val = TempData[key];
                    <text>localStorage.setItem('pollLast_@tid', @Json.Serialize(val));</text>
            }

            @foreach (var key in TempData.Keys.Where(k => k.StartsWith("PollRows_")))
            {
                    var tid = key.Substring("PollRows_".Length);
                    var val = TempData[key];
                    <text>localStorage.setItem('pollRows_@tid', @Json.Serialize(val));</text>
            }
        });
    </script>
}
