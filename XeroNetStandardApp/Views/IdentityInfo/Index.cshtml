@model XeroNetStandardApp.Models.EndpointControlPanelViewModel
@using System.Text.Json
@{
    ViewBag.Title = "Endpoint Control Panel";
}
@await Html.PartialAsync("_ProcessSummaryModal")

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <h5 class="card-title">Last Run Summary</h5>

        <div class="table-responsive">
            <table class="table table-sm table-striped table-bordered align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Organisation</th>
                        <th>Last&nbsp;Call</th>
                        <th>Successes</th>
                        <th>Failures</th>
                        <th>Rows&nbsp;Inserted</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var t in Model.Tenants)
                    {
                        if (Model.Stats.TryGetValue(t.TenantId!, out var s))
                        {
                            <tr>
                                <td>@t.OrgName</td>

                                <td class="last-run"
                                    data-tenant="@t.TenantId"
                                    data-timestamp="@s.LastCall.ToUniversalTime().ToString("yyyy-MM-dd'T'HH:mm:ss.fff'Z'")">
                                </td>

                                <td>@s.EndpointsSuccess</td>
                                <td>@s.EndpointsFail</td>
                                <td>@s.RecordsInserted.ToString("N0")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        <h5 class="card-title mb-3">Manual Endpoint Trigger</h5>

            <div class="table-responsive">
                <table class="table table-sm table-striped table-bordered align-middle">
                    <thead class="table-light">
                        <tr>
                            <th></th>
                            @foreach (var tenant in Model.Tenants)
                            {
                                <th class="text-center">@tenant.OrgName</th>
                            }
                        </tr>
                        <tr>
                            <th>
                                <button type="button"
                                        class="btn btn-success btn-sm"
                                        onclick="runIngest('ALL')">
                                    Run All
                                </button>
                            </th>
                            @foreach (var tenant in Model.Tenants)
                            {
                                <th class="text-center">
                                    <button type="button"
                                            class="btn btn-primary btn-sm"
                                            onclick="runIngest('@tenant.TenantId')">
                                        Run Selected
                                    </button>
                                </th>
                            }
                        </tr>
                        <tr>
                            <th>Endpoint</th>
                            @foreach (var tenant in Model.Tenants)
                            {
                                <th class="text-center">
                                    <input type="checkbox"
                                           class="js-column-toggle"
                                           data-tenant="@tenant.TenantId" />
                                    <small>Select&nbsp;All&nbsp;/&nbsp;None</small>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var endpoint in Model.Endpoints)
                        {
                            <tr>
                                <td>@endpoint.DisplayName</td>
                                @foreach (var tenant in Model.Tenants)
                                {
                                    <td class="text-center">
                                        <input type="checkbox"
                                               name="selected[@tenant.TenantId]"
                                               value="@endpoint.Key"
                                               class="form-check-input ep-checkbox tenant-@tenant.TenantId" />
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
    </div>
</div>

<!-- Progress overlay -->
<div id="runProgress"
     class="position-fixed top-0 start-0 w-100 h-100 d-none align-items-center justify-content-center bg-dark bg-opacity-50"
     style="z-index: 1050;">
    <div class="text-center">
        <div class="spinner-border text-light" role="status"></div>
        <div id="runProgressMessage" class="mt-2 text-light">Processing...</div>
    </div>
</div>


@section Scripts {
    <script>
        /* =========================================================
           GLOBAL HELPERS – visible to runIngest()
        ========================================================= */
        const overlay = document.getElementById('runProgress');
        const msgBox  = document.getElementById('runProgressMessage');

        function showOverlay(msg = 'Processing…') {
            msgBox.textContent = msg;
            overlay.classList.remove('d-none');
        }

        function hideOverlay() {
            overlay.classList.add('d-none');
        }

        /* =========================================================
           AJAX INGEST + MODAL
        ========================================================= */
          async function runIngest(tenantId) {
            // gather selected endpoints for this tenant
            const selected = [...document.querySelectorAll(`.tenant-${tenantId}:checked`)]
                            .map(cb => cb.value);

            if (selected.length === 0) {
                alert('Select at least one endpoint first.');
                return;
            }

            showOverlay('Manual data load initiated. Please wait…');

            try {
                const results = [];

                for (const ep of selected) {
                    const res = await fetch(`/api/ingest/run/${encodeURIComponent(ep)}?tenantId=${encodeURIComponent(tenantId)}`, {
                        method: 'POST'
                    });
                    if (!res.ok) throw new Error(`HTTP ${res.status} (${ep})`);
                    results.push(...await res.json().reports);   // merge into one big list
                }

                renderProcessSummary({
                    totalInserted: results.reduce((s, r) => s + r.rowsInserted, 0),
                    reports:       results,
                    errors:        results.filter(r => r.responseCode !== 200 && r.responseCode !== 304)
                });

                const modalEl = document.getElementById('processSummaryModal');
                new bootstrap.Modal(modalEl).show();
                modalEl.addEventListener('hidden.bs.modal', hideOverlay, { once: true });
            }
            catch (err) {
                hideOverlay();
                alert(err);
            }
        }


        function renderProcessSummary(data) {
            const { totalInserted, reports, errors = [] } = data;
            const upToDate = reports.length && reports.every(r => r.wasUpToDate);

            let html = '';
            if (totalInserted > 0) {
                html += `<p class="text-success fw-semibold">
                           ✅ ${totalInserted.toLocaleString()} record${totalInserted === 1 ? '' : 's'} inserted.
                         </p>`;
            } else if (upToDate) {
                html += `<p class="text-muted">☑️ No new records since last modified-date.</p>`;
            }

            if (errors.length) {
                html += `<p class="text-danger fw-semibold">
                           ⚠️ ${errors.length} endpoint${errors.length === 1 ? '' : 's'} failed
                         </p><ul>`;
                errors.forEach(e => {
                    html += `<li>${e.endpointName}${e.status ? ' (' + e.status + ')' : ''}
                                 – HTTP ${e.code}${e.errorDetail ? ': ' + e.errorDetail : ''}</li>`;
                });
                html += '</ul>';
            }

            html += `<details class="mt-3"><summary>Per-endpoint detail</summary>
                     <table class="table table-sm mt-2">
                       <thead><tr><th>Endpoint</th><th class="text-end">Rows</th><th>Result</th></tr></thead>
                       <tbody>${reports.map(r => `
                         <tr>
                           <td>${r.endpointName}${r.status ? ' ('+r.status+')' : ''}</td>
                           <td class="text-end">${r.rowsInserted}</td>
                           <td>${r.responseCode === 200 ? '✔︎ inserted'
                                 : r.responseCode === 304 ? '☑︎ up-to-date'
                                 : '⚠︎ HTTP ' + r.responseCode}</td>
                         </tr>`).join('')}
                       </tbody>
                     </table></details>`;

            document.getElementById('psm-content').innerHTML = html;
        }

        /* =========================================================
           DOM-READY SETUP
        ========================================================= */
        document.addEventListener('DOMContentLoaded', () => {
            // column toggles
            document.querySelectorAll('.js-column-toggle').forEach(toggle => {
                toggle.addEventListener('change', () => {
                    const tid = toggle.dataset.tenant;
                    document.querySelectorAll('.tenant-' + tid)
                            .forEach(cb => cb.checked = toggle.checked);
                });
            });

            // ISO-date formatting on page load (optional helper)
            if (typeof formatIsoDates === 'function')
                formatIsoDates('.last-run');
        });
    </script>
}

