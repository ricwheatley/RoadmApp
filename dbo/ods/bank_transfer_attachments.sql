-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero BankTransferAttachments
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Composite business key: bank_transfer_id + attachment_id (one attachment per bank transfer).
-- =============================================================

/* -------------------------------------------------------------
   ods.bank_transfer_attachments – Type‑2 Slowly Changing Dimensions table
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.bank_transfer_attachments (
    /* --- Business / natural key ------------------------------ */
    bank_transfer_id        UUID            NOT NULL,  -- Parent BankTransferID
    attachment_id           UUID            NOT NULL,  -- AttachmentID from Xero

    /* --- Relationship / context keys ------------------------- */
    organisation_id         UUID            NOT NULL,  -- Owning tenant / organisation

    /* --- Core scalar attributes ------------------------------ */
    file_name               VARCHAR(255),
    url                     VARCHAR(1024),
    mime_type               VARCHAR(100),
    content_length          INTEGER CHECK (content_length >= 0),
    include_online          BOOLEAN,
    updated_date_utc        TIMESTAMPTZ,

    /* --- SCD‑2 infrastructure -------------------------------- */
    surrogate_key           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from              TIMESTAMPTZ     NOT NULL,
    valid_to                TIMESTAMPTZ     NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current              BOOLEAN         NOT NULL DEFAULT TRUE,

    /* --- Audit & status -------------------------------------- */
    fetched_at              TIMESTAMPTZ NOT NULL,
    row_created_at          TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at          TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status           ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ----------------------------- */
    batch_id                     UUID         NOT NULL,
    landing_table_name           VARCHAR(255) NOT NULL,
    landing_record_identifier    VARCHAR(512) NOT NULL,
    raw_table_name               VARCHAR(255),
    api_call_id                  UUID,
    source_system_id             VARCHAR(100),
    source_record_modified_at    TIMESTAMPTZ,

    /* --- Constraints ----------------------------------------- */
    CONSTRAINT uq_bank_transfer_attachments_business_key_current
        UNIQUE (bank_transfer_id, attachment_id, is_current)
        WHERE is_current,

    CONSTRAINT ck_bank_transfer_attachments_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_bank_transfer_attachments_valid_dates
        CHECK (valid_from < valid_to),

    CONSTRAINT fk_attachments_bank_transfer
        FOREIGN KEY (bank_transfer_id)
        REFERENCES ods.bank_transfers(bank_transfer_id),

    CONSTRAINT fk_attachments_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id)
);

/* --- Indexes -------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_bank_transfer_attachments_business_key_current
    ON ods.bank_transfer_attachments(bank_transfer_id, attachment_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_bank_transfer_attachments_valid_to
    ON ods.bank_transfer_attachments(valid_to);

CREATE INDEX IF NOT EXISTS idx_bank_transfer_attachments_is_current
    ON ods.bank_transfer_attachments(is_current);

CREATE INDEX IF NOT EXISTS idx_bank_transfer_attachments_fetched_at
    ON ods.bank_transfer_attachments(fetched_at);

CREATE INDEX IF NOT EXISTS idx_bank_transfer_attachments_batch_id
    ON ods.bank_transfer_attachments(batch_id);

CREATE INDEX IF NOT EXISTS idx_bank_transfer_attachments_organisation_id
    ON ods.bank_transfer_attachments(organisation_id);

/* --- Trigger to maintain row_updated_at ----------------------- */
CREATE TRIGGER trg_update_bank_transfer_attachments_row_updated_at
BEFORE UPDATE ON ods.bank_transfer_attachments
FOR EACH ROW EXECUTE FUNCTION fn_update_row_updated_at();

/* --- Documentation ------------------------------------------- */
COMMENT ON TABLE ods.bank_transfer_attachments IS 'Attachments associated with individual bank transfers, captured as Type‑2 slowly changing dimension records.';
COMMENT ON COLUMN ods.bank_transfer_attachments.bank_transfer_id IS 'Parent BankTransferID (natural key linkage).';
COMMENT ON COLUMN ods.bank_transfer_attachments.attachment_id IS 'Natural identifier for the attachment file.';
COMMENT ON COLUMN ods.bank_transfer_attachments.content_length IS 'Size of the attached file in bytes.';
COMMENT ON COLUMN ods.bank_transfer_attachments.is_current IS 'TRUE if this row is the current version of the attachment record.';