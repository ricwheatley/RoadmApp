-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero BankTransfers
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: bank_transfer_id (UUID).
--    * Nested objects/arrays (FromBankAccount, ToBankAccount, Attachments) are NOT expanded here – request
--      separate tables if needed.
-- =============================================================

/* -------------------------------------------------------------
   ods.bank_transfers – Type‑2 Slowly Changing Dimensions table
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.bank_transfers (
    /* --- Business / natural key ------------------------------ */
    bank_transfer_id          UUID            NOT NULL,  -- BankTransferID from Xero

    /* --- Relationship / context keys ------------------------- */
    organisation_id           UUID            NOT NULL,  -- Owning tenant / organisation
    from_bank_account_id      UUID,                      -- AccountID (source)
    to_bank_account_id        UUID,                      -- AccountID (destination)

    /* --- Core scalar attributes ------------------------------ */
    amount                    NUMERIC(18,2)  NOT NULL CHECK (amount >= 0),
    currency_rate             NUMERIC(18,6)             CHECK (currency_rate >= 0),
    transfer_date             DATE,                      -- Date of the transfer fileciteturn34file4
    created_date_utc          TIMESTAMPTZ,               -- CreatedDateUTC when provided
    from_bank_transaction_id  UUID,
    to_bank_transaction_id    UUID,
    from_is_reconciled        BOOLEAN,
    to_is_reconciled          BOOLEAN,
    reference                 VARCHAR(255),
    has_attachments           BOOLEAN,

    /* --- SCD‑2 infrastructure -------------------------------- */
    surrogate_key             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from                TIMESTAMPTZ     NOT NULL,
    valid_to                  TIMESTAMPTZ     NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current                BOOLEAN         NOT NULL DEFAULT TRUE,

    /* --- Audit & status -------------------------------------- */
    fetched_at                TIMESTAMPTZ NOT NULL,
    row_created_at            TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at            TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status             ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ----------------------------- */
    batch_id                     UUID         NOT NULL,
    landing_table_name           VARCHAR(255) NOT NULL,
    landing_record_identifier    VARCHAR(512) NOT NULL,
    raw_table_name               VARCHAR(255),
    api_call_id                  UUID,
    source_system_id             VARCHAR(100),
    source_record_modified_at    TIMESTAMPTZ,

    /* --- Constraints ----------------------------------------- */
    CONSTRAINT uq_bank_transfers_business_key_current
        UNIQUE (bank_transfer_id, is_current) WHERE is_current,

    CONSTRAINT ck_bank_transfers_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_bank_transfers_valid_dates
        CHECK (valid_from < valid_to),

    CONSTRAINT fk_bank_transfers_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id),

    CONSTRAINT fk_bank_transfers_from_account
        FOREIGN KEY (from_bank_account_id)
        REFERENCES ods.accounts(account_id),

    CONSTRAINT fk_bank_transfers_to_account
        FOREIGN KEY (to_bank_account_id)
        REFERENCES ods.accounts(account_id)
);

/* --- Indexes -------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_bank_transfers_business_key_current
    ON ods.bank_transfers(bank_transfer_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_bank_transfers_valid_to
    ON ods.bank_transfers(valid_to);

CREATE INDEX IF NOT EXISTS idx_bank_transfers_is_current
    ON ods.bank_transfers(is_current);

CREATE INDEX IF NOT EXISTS idx_bank_transfers_fetched_at
    ON ods.bank_transfers(fetched_at);

CREATE INDEX IF NOT EXISTS idx_bank_transfers_batch_id
    ON ods.bank_transfers(batch_id);

CREATE INDEX IF NOT EXISTS idx_bank_transfers_organisation_id
    ON ods.bank_transfers(organisation_id);

/* --- Trigger to maintain row_updated_at ----------------------- */
CREATE TRIGGER trg_update_bank_transfers_row_updated_at
BEFORE UPDATE ON ods.bank_transfers
FOR EACH ROW EXECUTE FUNCTION ods.fn_update_row_updated_at();

/* --- Documentation ------------------------------------------- */
COMMENT ON TABLE ods.bank_transfers IS 'Bank transfers between two bank accounts, captured as Type‑2 slowly changing dimension records.';
COMMENT ON COLUMN ods.bank_transfers.bank_transfer_id IS 'Natural business key (BankTransferID) for a Xero bank transfer.';
COMMENT ON COLUMN ods.bank_transfers.amount IS 'Amount of the transfer.';
COMMENT ON COLUMN ods.bank_transfers.from_bank_account_id IS 'Source bank account UUID.';
COMMENT ON COLUMN ods.bank_transfers.to_bank_account_id IS 'Destination bank account UUID.';
COMMENT ON COLUMN ods.bank_transfers.is_current IS 'TRUE if this row represents the current version of the bank transfer record.';
