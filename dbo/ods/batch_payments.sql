-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero BatchPayments
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: batch_payment_id (UUID).
--    * Nested Payments array is NOT expanded here – ask if you need an `batch_payment_payments` table.
-- =============================================================

/* -------------------------------------------------------------
   ods.batch_payments – Type‑2 Slowly Changing Dimensions table
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.batch_payments (
    /* --- Business / natural key ------------------------------ */
    batch_payment_id       UUID            NOT NULL,  -- Xero BatchPaymentID

    /* --- Relationship / context keys ------------------------- */
    organisation_id        UUID            NOT NULL,  -- Owning tenant / organisation
    account_id             UUID            NOT NULL,  -- Bank Account used to make the batch payment

    /* --- Core scalar attributes ------------------------------ */
    date                   TIMESTAMPTZ,
    type                   VARCHAR(10)     CHECK (type IN ('PAYBATCH','RECBATCH')),
    status                 VARCHAR(12)     CHECK (status IN ('AUTHORISED','DELETED')),
    particulars            VARCHAR(50),    -- NZ only
    code                   VARCHAR(50),    -- NZ only transaction code
    reference              VARCHAR(255),   -- NZ only / general reference
    details                VARCHAR(255),   -- Non‑NZ only
    narrative              VARCHAR(255),   -- UK only statement description
    total_amount           NUMERIC(18,2) CHECK (total_amount >= 0),
    is_reconciled          BOOLEAN,
    updated_date_utc       TIMESTAMPTZ,

    /* --- SCD‑2 infrastructure -------------------------------- */
    surrogate_key          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from             TIMESTAMPTZ     NOT NULL,
    valid_to               TIMESTAMPTZ     NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current             BOOLEAN         NOT NULL DEFAULT TRUE,

    /* --- Audit & status -------------------------------------- */
    fetched_at             TIMESTAMPTZ NOT NULL,
    row_created_at         TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at         TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status          ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ----------------------------- */
    batch_id                     UUID         NOT NULL,
    landing_table_name           VARCHAR(255) NOT NULL,
    landing_record_identifier    VARCHAR(512) NOT NULL,
    raw_table_name               VARCHAR(255),
    api_call_id                  UUID,
    source_system_id             VARCHAR(100),
    source_record_modified_at    TIMESTAMPTZ,

    /* --- Constraints ----------------------------------------- */
    CONSTRAINT uq_batch_payments_business_key_current
        UNIQUE (batch_payment_id, is_current)
        WHERE is_current,

    CONSTRAINT ck_batch_payments_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_batch_payments_valid_dates
        CHECK (valid_from < valid_to),

    CONSTRAINT fk_batch_payments_account
        FOREIGN KEY (account_id)
        REFERENCES ods.accounts(account_id),

    CONSTRAINT fk_batch_payments_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id)
);

/* --- Indexes -------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_batch_payments_business_key_current
    ON ods.batch_payments(batch_payment_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_batch_payments_valid_to
    ON ods.batch_payments(valid_to);

CREATE INDEX IF NOT EXISTS idx_batch_payments_is_current
    ON ods.batch_payments(is_current);

CREATE INDEX IF NOT EXISTS idx_batch_payments_fetched_at
    ON ods.batch_payments(fetched_at);

CREATE INDEX IF NOT EXISTS idx_batch_payments_batch_id
    ON ods.batch_payments(batch_id);

CREATE INDEX IF NOT EXISTS idx_batch_payments_organisation_id
    ON ods.batch_payments(organisation_id);

/* --- Trigger to maintain row_updated_at ----------------------- */
CREATE TRIGGER trg_update_batch_payments_row_updated_at
BEFORE UPDATE ON ods.batch_payments
FOR EACH ROW EXECUTE FUNCTION ods.fn_update_row_updated_at();

/* --- Documentation ------------------------------------------- */
COMMENT ON TABLE ods.batch_payments IS 'Batch payments grouping multiple bill/invoice payments, captured as Type‑2 slowly changing dimension records.';
COMMENT ON COLUMN ods.batch_payments.batch_payment_id IS 'Natural identifier for the batch payment.';
COMMENT ON COLUMN ods.batch_payments.account_id IS 'Bank account used to make the batch payment.';
COMMENT ON COLUMN ods.batch_payments.type IS 'PAYBATCH for bills, RECBATCH for sales.';
COMMENT ON COLUMN ods.batch_payments.total_amount IS 'Total amount of all payments in the batch.';
COMMENT ON COLUMN ods.batch_payments.is_current IS 'TRUE if this row is the current version of the batch payment.';