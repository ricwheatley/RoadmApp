-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero CreditNotePayments
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: payment_id (UUID). One payment per row.
--    * Parent linkage via credit_note_id + organisation_id.
-- =============================================================

/* -------------------------------------------------------------
   ods.credit_note_payments – payments applied to credit notes
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.credit_note_payments (
    /* --- Business / natural key ----------------------------- */
    payment_id           UUID            NOT NULL, -- Xero PaymentID

    /* --- Relationship keys ---------------------------------- */
    credit_note_id       UUID            NOT NULL,
    organisation_id      UUID            NOT NULL,

    /* --- Core scalar attributes ----------------------------- */
    date                 TIMESTAMPTZ,
    currency_rate        NUMERIC(18,6),      -- FX rate at time of payment
    amount               NUMERIC(18,2),
    bank_amount          NUMERIC(18,2),
    reference            VARCHAR(255),
    payment_type         VARCHAR(30),        -- enum, see check below
    status               VARCHAR(20),        -- enum, see check below
    has_account          BOOLEAN,
    is_reconciled        BOOLEAN,
    updated_date_utc     TIMESTAMPTZ,
    account_id           UUID,
    batch_payment_id     UUID,

    /* --- SCD‑2 infrastructure ------------------------------- */
    surrogate_key        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from           TIMESTAMPTZ     NOT NULL,
    valid_to             TIMESTAMPTZ     NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current           BOOLEAN         NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------- */
    fetched_at           TIMESTAMPTZ     NOT NULL,
    row_created_at       TIMESTAMPTZ     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at       TIMESTAMPTZ     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status        ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ---------------------------- */
    batch_id                  UUID         NOT NULL,
    landing_table_name        VARCHAR(255) NOT NULL,
    landing_record_identifier VARCHAR(512) NOT NULL,
    raw_table_name            VARCHAR(255),
    api_call_id               UUID,
    source_system_id          VARCHAR(100),
    source_record_modified_at TIMESTAMPTZ,

    /* --- Constraints ---------------------------------------- */
    CONSTRAINT uq_credit_note_payments_business_key_current
        UNIQUE (payment_id, is_current) WHERE is_current,

    CONSTRAINT fk_credit_note_payments_credit_note
        FOREIGN KEY (credit_note_id)
        REFERENCES ods.credit_notes(credit_note_id),

    CONSTRAINT fk_credit_note_payments_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id),

    /* Value checks */
    CONSTRAINT ck_credit_note_payments_amounts_non_negative
        CHECK (
            amount      IS NULL OR amount      >= 0 AND
            bank_amount IS NULL OR bank_amount >= 0
        ),

    CONSTRAINT ck_credit_note_payments_currency_rate_positive
        CHECK (currency_rate IS NULL OR currency_rate > 0),

    CONSTRAINT ck_credit_note_payments_status
        CHECK (status IN ('AUTHORISED','DELETED','VOIDED')),

    CONSTRAINT ck_credit_note_payments_payment_type
        CHECK (payment_type IN (
            'ACCRECPAYMENT',
            'ACCPAYPAYMENT',
            'ARCREDITPAYMENT',
            'APCREDITPAYMENT',
            'RECOVEREDPAYMENT'
        )),

    CONSTRAINT ck_credit_note_payments_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_credit_note_payments_valid_dates
        CHECK (valid_from < valid_to)
);

/* --- Indexes ------------------------------------------------ */
CREATE INDEX IF NOT EXISTS idx_cn_payments_business_key_current
    ON ods.credit_note_payments(payment_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_cn_payments_credit_note
    ON ods.credit_note_payments(credit_note_id);

CREATE INDEX IF NOT EXISTS idx_cn_payments_valid_to
    ON ods.credit_note_payments(valid_to);

CREATE INDEX IF NOT EXISTS idx_cn_payments_is_current
    ON ods.credit_note_payments(is_current);

CREATE INDEX IF NOT EXISTS idx_cn_payments_fetched_at
    ON ods.credit_note_payments(fetched_at);

CREATE INDEX IF NOT EXISTS idx_cn_payments_batch_id
    ON ods.credit_note_payments(batch_id);

CREATE INDEX IF NOT EXISTS idx_cn_payments_organisation_id
    ON ods.credit_note_payments(organisation_id);

/* --- Trigger to maintain row_updated_at -------------------- */
CREATE TRIGGER trg_update_cn_payments_row_updated_at
BEFORE UPDATE ON ods.credit_note_payments
FOR EACH ROW EXECUTE FUNCTION ods.fn_update_row_updated_at();

/* --- Documentation ----------------------------------------- */
COMMENT ON TABLE ods.credit_note_payments IS 'Payments applied to credit notes, captured as Type‑2 slowly‑changing dimensions.';
COMMENT ON COLUMN ods.credit_note_payments.payment_id IS 'Xero PaymentID (business key).';
COMMENT ON COLUMN ods.credit_note_payments.credit_note_id IS 'Parent CreditNoteID.';
COMMENT ON COLUMN ods.credit_note_payments.amount IS 'Payment amount in document currency.';
COMMENT ON COLUMN ods.credit_note_payments.surrogate_key IS 'Surrogate identifier for each version of the payment record.';
COMMENT ON COLUMN ods.credit_note_payments.valid_from IS 'Timestamp when this payment record version becomes valid.';
COMMENT ON COLUMN ods.credit_note_payments.valid_to IS 'Timestamp when this payment record version ceases to be valid.';
COMMENT ON COLUMN ods.credit_note_payments.is_current IS 'TRUE if this row represents the current version.';
