-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero InvoiceAllocations
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses IDENTITY (preferred over SERIAL).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: allocation_id (UUID). One allocation per row.
--    * Parent linkage via invoice_id + organisation_id.
--    * Represents an allocation of a payment, credit note, prepayment or overpayment to an invoice.
-- =============================================================

/* -------------------------------------------------------------
   ods.invoice_allocations – allocations applied to invoices (Type‑2 SCD)
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.invoice_allocations (
    /* --- Business / natural key ----------------------------- */
    allocation_id       UUID           NOT NULL,     -- Xero AllocationID

    /* --- Parent linkage ------------------------------------- */
    invoice_id          UUID           NOT NULL,     -- Parent invoice (InvoiceID)

    /* --- Core allocation attributes ------------------------- */
    date                TIMESTAMPTZ,                 -- Date of allocation
    amount              NUMERIC(18,2) CHECK (amount >= 0),

    /* --- Tenant / organisation ------------------------------ */
    organisation_id     UUID           NOT NULL,

    /* --- SCD‑2 infrastructure ------------------------------- */
    surrogate_key       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from          TIMESTAMPTZ    NOT NULL,
    valid_to            TIMESTAMPTZ    NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current          BOOLEAN        NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------- */
    fetched_at          TIMESTAMPTZ    NOT NULL,
    row_created_at      TIMESTAMPTZ    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at      TIMESTAMPTZ    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status       ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ---------------------------- */
    batch_id                  UUID         NOT NULL,
    landing_table_name        VARCHAR(255) NOT NULL,
    landing_record_identifier VARCHAR(512) NOT NULL,
    raw_table_name            VARCHAR(255),
    api_call_id               UUID,
    source_system_id          VARCHAR(100),
    source_record_modified_at TIMESTAMPTZ,

    /* --- Constraints ---------------------------------------- */
    CONSTRAINT uq_invoice_allocations_business_key_current
        UNIQUE (allocation_id, is_current)
        WHERE is_current,

    CONSTRAINT fk_invoice_allocations_invoice
        FOREIGN KEY (invoice_id)
        REFERENCES ods.invoices(invoice_id),

    CONSTRAINT fk_invoice_allocations_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id),

    -- Generic SCD & status checks
    CONSTRAINT ck_invoice_allocations_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_invoice_allocations_valid_dates
        CHECK (valid_from < valid_to)
);

/* --- Indexes ------------------------------------------------ */
CREATE INDEX IF NOT EXISTS idx_invoice_allocations_business_key_current
    ON ods.invoice_allocations(allocation_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_invoice_allocations_invoice
    ON ods.invoice_allocations(invoice_id);

CREATE INDEX IF NOT EXISTS idx_invoice_allocations_valid_to
    ON ods.invoice_allocations(valid_to);

CREATE INDEX IF NOT EXISTS idx_invoice_allocations_is_current
    ON ods.invoice_allocations(is_current);

CREATE INDEX IF NOT EXISTS idx_invoice_allocations_fetched_at
    ON ods.invoice_allocations(fetched_at);

CREATE INDEX IF NOT EXISTS idx_invoice_allocations_batch_id
    ON ods.invoice_allocations(batch_id);

CREATE INDEX IF NOT EXISTS idx_invoice_allocations_organisation_id
    ON ods.invoice_allocations(organisation_id);

/* --- Trigger to maintain row_updated_at -------------------- */
CREATE TRIGGER trg_update_invoice_allocations_row_updated_at
BEFORE UPDATE ON ods.invoice_allocations
FOR EACH ROW EXECUTE FUNCTION ods.fn_update_row_updated_at();

/* --- Documentation ----------------------------------------- */
COMMENT ON TABLE ods.invoice_allocations IS 'Allocations (credit notes, prepayments, overpayments, etc.) applied to invoices, stored as Type‑2 slowly‑changing dimensions (one row per allocation version).';
COMMENT ON COLUMN ods.invoice_allocations.allocation_id IS 'Xero AllocationID (business key).';
COMMENT ON COLUMN ods.invoice_allocations.invoice_id IS 'Parent InvoiceID (FK to ods.invoices).';
COMMENT ON COLUMN ods.invoice_allocations.amount IS 'Amount allocated to the invoice.';
COMMENT ON COLUMN ods.invoice_allocations.surrogate_key IS 'Surrogate identifier for each version of the allocation record.';
COMMENT ON COLUMN ods.invoice_allocations.valid_from IS 'Timestamp when this allocation record version becomes valid.';
COMMENT ON COLUMN ods.invoice_allocations.valid_to IS 'Timestamp when this allocation record version ceases to be valid.';
COMMENT ON COLUMN ods.invoice_allocations.is_current IS 'TRUE if this row represents the current version.';
