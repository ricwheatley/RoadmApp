-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero InvoiceAttachments
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Composite business key: invoice_id + attachment_id (one attachment per invoice).
-- =============================================================

/* -------------------------------------------------------------
   ods.invoice_attachments – file attachments linked to invoices
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.invoice_attachments (
    /* --- Business / natural key ----------------------------- */
    invoice_id          UUID           NOT NULL,   -- Parent invoice (InvoiceID)
    attachment_id       UUID           NOT NULL,   -- Xero AttachmentID (file identifier)

    /* --- Core attachment attributes ------------------------- */
    file_name           VARCHAR(255)   NOT NULL,
    url                 VARCHAR(512)   NOT NULL,
    mime_type           VARCHAR(100)   NOT NULL,
    content_length      INTEGER        NOT NULL CHECK (content_length >= 0),
    include_online      BOOLEAN        NOT NULL,
    updated_date_utc    TIMESTAMPTZ,

    /* --- Tenant / organisation ------------------------------ */
    organisation_id     UUID           NOT NULL,

    /* --- SCD‑2 infrastructure ------------------------------- */
    surrogate_key       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from          TIMESTAMPTZ    NOT NULL,
    valid_to            TIMESTAMPTZ    NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current          BOOLEAN        NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------- */
    fetched_at          TIMESTAMPTZ    NOT NULL,
    row_created_at      TIMESTAMPTZ    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at      TIMESTAMPTZ    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status       ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ---------------------------- */
    batch_id                  UUID         NOT NULL,
    landing_table_name        VARCHAR(255) NOT NULL,
    landing_record_identifier VARCHAR(512) NOT NULL,
    raw_table_name            VARCHAR(255),
    api_call_id               UUID,
    source_system_id          VARCHAR(100),
    source_record_modified_at TIMESTAMPTZ,

    /* --- Constraints ---------------------------------------- */
    CONSTRAINT uq_invoice_attachments_business_key_current
        UNIQUE (invoice_id, attachment_id, is_current)
        WHERE is_current,

    CONSTRAINT fk_invoice_attachments_invoice
        FOREIGN KEY (invoice_id)
        REFERENCES ods.invoices(invoice_id),

    CONSTRAINT fk_invoice_attachments_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id),

    -- Generic SCD & status checks
    CONSTRAINT ck_invoice_attachments_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_invoice_attachments_valid_dates
        CHECK (valid_from < valid_to)
);

/* --- Indexes ------------------------------------------------ */
CREATE INDEX IF NOT EXISTS idx_invoice_attachments_business_key_current
    ON ods.invoice_attachments(invoice_id, attachment_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_invoice_attachments_invoice
    ON ods.invoice_attachments(invoice_id);

CREATE INDEX IF NOT EXISTS idx_invoice_attachments_valid_to
    ON ods.invoice_attachments(valid_to);

CREATE INDEX IF NOT EXISTS idx_invoice_attachments_is_current
    ON ods.invoice_attachments(is_current);

CREATE INDEX IF NOT EXISTS idx_invoice_attachments_fetched_at
    ON ods.invoice_attachments(fetched_at);

CREATE INDEX IF NOT EXISTS idx_invoice_attachments_batch_id
    ON ods.invoice_attachments(batch_id);

CREATE INDEX IF NOT EXISTS idx_invoice_attachments_organisation_id
    ON ods.invoice_attachments(organisation_id);

/* --- Trigger to maintain row_updated_at -------------------- */
CREATE TRIGGER trg_update_invoice_attachments_row_updated_at
BEFORE UPDATE ON ods.invoice_attachments
FOR EACH ROW EXECUTE FUNCTION ods.fn_update_row_updated_at();

/* --- Documentation ----------------------------------------- */
COMMENT ON TABLE ods.invoice_attachments IS 'Attachments (files) linked to invoices, stored as Type‑2 slowly‑changing dimensions (one row per attachment version).';
COMMENT ON COLUMN ods.invoice_attachments.invoice_id IS 'Parent InvoiceID (FK to ods.invoices).';
COMMENT ON COLUMN ods.invoice_attachments.attachment_id IS 'Xero AttachmentID (business key for the file).';
COMMENT ON COLUMN ods.invoice_attachments.file_name IS 'Original attachment filename.';
COMMENT ON COLUMN ods.invoice_attachments.url IS 'API URL to retrieve or download the attachment.';
COMMENT ON COLUMN ods.invoice_attachments.mime_type IS 'MIME content‑type of the attachment.';
COMMENT ON COLUMN ods.invoice_attachments.content_length IS 'Attachment file size in bytes.';
COMMENT ON COLUMN ods.invoice_attachments.include_online IS 'Whether the attachment is included when the invoice PDF is viewed online.';
COMMENT ON COLUMN ods.invoice_attachments.surrogate_key IS 'Surrogate identifier for each version of the attachment record.';
COMMENT ON COLUMN ods.invoice_attachments.valid_from IS 'Timestamp when this attachment record version becomes valid.';
COMMENT ON COLUMN ods.invoice_attachments.valid_to IS 'Timestamp when this attachment record version ceases to be valid.';
COMMENT ON COLUMN ods.invoice_attachments.is_current IS 'TRUE if this row represents the current version.';
