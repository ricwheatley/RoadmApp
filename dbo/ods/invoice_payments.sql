-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero InvoicePayments
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses IDENTITY (preferred over SERIAL).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: payment_id (UUID). One payment per row.
--    * Parent linkage via invoice_id + organisation_id.
-- =============================================================

/* -------------------------------------------------------------
   ods.invoice_payments – individual payments applied to invoices (Type‑2 SCD)
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.invoice_payments (
    /* --- Business / natural key ----------------------------- */
    payment_id          UUID           NOT NULL, -- Xero PaymentIDfileciteturn31file6

    /* --- Parent linkage ------------------------------------- */
    invoice_id          UUID           NOT NULL, -- Parent invoice (InvoiceID)fileciteturn31file6

    /* --- Core payment attributes ---------------------------- */
    account_id          UUID,                      -- GL account paid into / out of (AccountID)fileciteturn31file6
    date                TIMESTAMPTZ,               -- Date of paymentfileciteturn31file6
    currency_rate       NUMERIC(12,6),             -- Exchange rate at payment timefileciteturn31file6
    amount              NUMERIC(18,2) CHECK (amount >= 0), -- Amount in document currencyfileciteturn31file6
    bank_amount         NUMERIC(18,2) CHECK (bank_amount >= 0),
    payment_type        VARCHAR(30),               -- e.g. ACCRECPAYMENT, ACCPAYPAYMENT, etc.fileciteturn31file6
    status              VARCHAR(15) CHECK (status IN ('AUTHORISED','VOIDED','DELETED','PENDING','PAID')), -- Allowed statusesfileciteturn31file6
    reference           VARCHAR(255),              -- Optional reference
    has_account         BOOLEAN,                   -- Whether Account is supplied
    is_reconciled       BOOLEAN,                   -- Reconciliation flag
    updated_date_utc    TIMESTAMPTZ,               -- Last update timestampfileciteturn31file6

    /* --- Tenant / organisation ------------------------------ */
    organisation_id     UUID           NOT NULL,

    /* --- SCD‑2 infrastructure ------------------------------- */
    surrogate_key       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from          TIMESTAMPTZ    NOT NULL,
    valid_to            TIMESTAMPTZ    NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current          BOOLEAN        NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------- */
    fetched_at          TIMESTAMPTZ    NOT NULL,
    row_created_at      TIMESTAMPTZ    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at      TIMESTAMPTZ    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status       ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ---------------------------- */
    batch_id                  UUID         NOT NULL,
    landing_table_name        VARCHAR(255) NOT NULL,
    landing_record_identifier VARCHAR(512) NOT NULL,
    raw_table_name            VARCHAR(255),
    api_call_id               UUID,
    source_system_id          VARCHAR(100),
    source_record_modified_at TIMESTAMPTZ,

    /* --- Constraints ---------------------------------------- */
    CONSTRAINT uq_invoice_payments_business_key_current
        UNIQUE (payment_id, is_current)
        WHERE is_current,

    CONSTRAINT fk_invoice_payments_invoice
        FOREIGN KEY (invoice_id)
        REFERENCES ods.invoices(invoice_id),

    CONSTRAINT fk_invoice_payments_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id),

    -- Generic SCD & status checks
    CONSTRAINT ck_invoice_payments_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_invoice_payments_valid_dates
        CHECK (valid_from < valid_to)
);

/* --- Indexes ------------------------------------------------ */
CREATE INDEX IF NOT EXISTS idx_invoice_payments_business_key_current
    ON ods.invoice_payments(payment_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_invoice_payments_invoice
    ON ods.invoice_payments(invoice_id);

CREATE INDEX IF NOT EXISTS idx_invoice_payments_valid_to
    ON ods.invoice_payments(valid_to);

CREATE INDEX IF NOT EXISTS idx_invoice_payments_is_current
    ON ods.invoice_payments(is_current);

CREATE INDEX IF NOT EXISTS idx_invoice_payments_fetched_at
    ON ods.invoice_payments(fetched_at);

CREATE INDEX IF NOT EXISTS idx_invoice_payments_batch_id
    ON ods.invoice_payments(batch_id);

CREATE INDEX IF NOT EXISTS idx_invoice_payments_organisation_id
    ON ods.invoice_payments(organisation_id);

/* --- Trigger to maintain row_updated_at -------------------- */
CREATE TRIGGER trg_update_invoice_payments_row_updated_at
BEFORE UPDATE ON ods.invoice_payments
FOR EACH ROW EXECUTE FUNCTION fn_update_row_updated_at();

/* --- Documentation ----------------------------------------- */
COMMENT ON TABLE ods.invoice_payments IS 'Payments applied to invoices stored as Type‑2 slowly‑changing dimensions (one row per payment version).';
COMMENT ON COLUMN ods.invoice_payments.payment_id IS 'Xero PaymentID (business key).';
COMMENT ON COLUMN ods.invoice_payments.invoice_id IS 'Parent InvoiceID (FK to ods.invoices).';
COMMENT ON COLUMN ods.invoice_payments.amount IS 'Payment amount in document currency.';
COMMENT ON COLUMN ods.invoice_payments.bank_amount IS 'Payment amount in base/bank currency.';
COMMENT ON COLUMN ods.invoice_payments.payment_type IS 'Type of payment (e.g. ACCRECPAYMENT).';
COMMENT ON COLUMN ods.invoice_payments.surrogate_key IS 'Surrogate identifier for each version of the payment record.';
COMMENT ON COLUMN ods.invoice_payments.valid_from IS 'Timestamp when this payment record version becomes valid.';
COMMENT ON COLUMN ods.invoice_payments.valid_to IS 'Timestamp when this payment record version ceases to be valid.';
COMMENT ON COLUMN ods.invoice_payments.is_current IS 'TRUE if this row represents the current version.';
