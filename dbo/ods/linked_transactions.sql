-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero LinkedTransactions
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: linked_transaction_id (UUID).
--    * Represents the link between a source invoice line and a target bill line for on‑charging.
-- =============================================================

/* -------------------------------------------------------------
   ods.linked_transactions – Type‑2 Slowly Changing Dimensions
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.linked_transactions (
    /* --- Business / natural key ----------------------------- */
    linked_transaction_id        UUID            NOT NULL,   -- Xero LinkedTransactionID

    /* --- Tenant / organisation ------------------------------ */
    organisation_id              UUID            NOT NULL,

    /* --- Core scalar attributes ----------------------------- */
    source_transaction_id        UUID            NOT NULL,
    source_line_item_id          UUID            NOT NULL,
    target_transaction_id        UUID,
    target_line_item_id          UUID,
    contact_id                   UUID,
    link_status                  VARCHAR(20)     NOT NULL  -- e.g. DRAFT | APPROVED | BILLED | VOIDED
        CHECK (link_status IN ('DRAFT','APPROVED','BILLED','VOIDED')),
    updated_date_utc             TIMESTAMPTZ,

    /* --- SCD‑2 infrastructure ------------------------------- */
    surrogate_key                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from                   TIMESTAMPTZ NOT NULL,
    valid_to                     TIMESTAMPTZ NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current                   BOOLEAN NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------- */
    fetched_at                   TIMESTAMPTZ NOT NULL,
    row_created_at               TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at               TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status                ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ---------------------------- */
    batch_id                     UUID         NOT NULL,
    landing_table_name           VARCHAR(255) NOT NULL,
    landing_record_identifier    VARCHAR(512) NOT NULL,
    raw_table_name               VARCHAR(255),
    api_call_id                  UUID,
    source_system_id             VARCHAR(100),
    source_record_modified_at    TIMESTAMPTZ,

    /* --- Constraints ---------------------------------------- */
    CONSTRAINT uq_linked_txn_business_key_current UNIQUE (linked_transaction_id, is_current) WHERE is_current,

    CONSTRAINT ck_linked_txn_record_status CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),
    CONSTRAINT ck_linked_txn_valid_dates CHECK (valid_from < valid_to),

    /* --- Foreign Keys --------------------------------------- */
    CONSTRAINT fk_linked_txn_org FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id)
);

/* --- Indexes -------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_linked_txn_business_key_current ON ods.linked_transactions(linked_transaction_id) WHERE is_current;
CREATE INDEX IF NOT EXISTS idx_linked_txn_valid_to          ON ods.linked_transactions(valid_to);
CREATE INDEX IF NOT EXISTS idx_linked_txn_is_current        ON ods.linked_transactions(is_current);
CREATE INDEX IF NOT EXISTS idx_linked_txn_fetched_at        ON ods.linked_transactions(fetched_at);
CREATE INDEX IF NOT EXISTS idx_linked_txn_batch_id          ON ods.linked_transactions(batch_id);
CREATE INDEX IF NOT EXISTS idx_linked_txn_org_id            ON ods.linked_transactions(organisation_id);
CREATE INDEX IF NOT EXISTS idx_linked_txn_status            ON ods.linked_transactions(link_status);

/* --- Trigger to maintain row_updated_at --------------------- */
CREATE TRIGGER trg_update_linked_txn_row_updated_at
BEFORE UPDATE ON ods.linked_transactions
FOR EACH ROW EXECUTE FUNCTION ods.fn_update_row_updated_at();

/* --- Documentation ----------------------------------------- */
COMMENT ON TABLE ods.linked_transactions IS 'Links a source invoice line item to a target bill line item, enabling on‑charge workflows. Stored with Type‑2 slowly changing dimensions to preserve history.';
COMMENT ON COLUMN ods.linked_transactions.linked_transaction_id IS 'Natural business key (Xero LinkedTransactionID).';
COMMENT ON COLUMN ods.linked_transactions.link_status IS 'Workflow status of the link: DRAFT, APPROVED, BILLED, or VOIDED.';
