-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero Overpayments
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: overpayment_id (UUID).
--    * Child objects/arrays (LineItems, Allocations, Attachments, Contact) are NOT expanded here –
--      ask for additional tables if needed.
-- =============================================================

/* -------------------------------------------------------------
   ods.overpayments – Type‑2 Slowly Changing Dimensions table
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.overpayments (
    /* --- Business / natural key ----------------------------- */
    overpayment_id        UUID            NOT NULL,   -- Xero OverpaymentID

    /* --- Tenant / organisation ------------------------------ */
    organisation_id       UUID            NOT NULL,

    /* --- Core scalar attributes ----------------------------- */
    type                  VARCHAR(25)     NOT NULL  CHECK (type IN ('ACCPAYOVERPAYMENT','ACCRECOVERPAYMENT')),
    status                VARCHAR(10)     NOT NULL  CHECK (status IN ('AUTHORISED','PAID','VOIDED')),
    date                  DATE,
    due_date              DATE,
    line_amount_types     VARCHAR(10)              CHECK (line_amount_types IN ('EXCLUSIVE','INCLUSIVE','NOTAX')),
    currency_code         VARCHAR(3)               CHECK (currency_code ~ '^[A-Z]{3}$'),
    currency_rate         NUMERIC(18,6)            CHECK (currency_rate >= 0),
    reference             VARCHAR(255),
    has_attachments       BOOLEAN,
    sub_total             NUMERIC(18,2)            CHECK (sub_total >= 0),
    total_tax             NUMERIC(18,2)            CHECK (total_tax >= 0),
    total                 NUMERIC(18,2)            CHECK (total >= 0),
    amount_due            NUMERIC(18,2)            CHECK (amount_due >= 0),
    amount_paid           NUMERIC(18,2)            CHECK (amount_paid >= 0),
    remaining_credit      NUMERIC(18,2)            CHECK (remaining_credit >= 0),
    updated_date_utc      TIMESTAMPTZ,

    /* --- SCD‑2 infrastructure ------------------------------- */
    surrogate_key         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from            TIMESTAMPTZ NOT NULL,
    valid_to              TIMESTAMPTZ NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current            BOOLEAN     NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------- */
    fetched_at            TIMESTAMPTZ NOT NULL,
    row_created_at        TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at        TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status         ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ---------------------------- */
    batch_id                     UUID         NOT NULL,
    landing_table_name           VARCHAR(255) NOT NULL,
    landing_record_identifier    VARCHAR(512) NOT NULL,
    raw_table_name               VARCHAR(255),
    api_call_id                  UUID,
    source_system_id             VARCHAR(100),
    source_record_modified_at    TIMESTAMPTZ,

    /* --- Constraints ---------------------------------------- */
    CONSTRAINT uq_overpayments_business_key_current
        UNIQUE (overpayment_id, is_current)
        WHERE is_current,

    CONSTRAINT ck_overpayments_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_overpayments_valid_dates
        CHECK (valid_from < valid_to),

    /* --- Foreign Keys --------------------------------------- */
    CONSTRAINT fk_overpayments_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id)
);

/* --- Indexes -------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_overpayments_business_key_current
    ON ods.overpayments(overpayment_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_overpayments_valid_to
    ON ods.overpayments(valid_to);

CREATE INDEX IF NOT EXISTS idx_overpayments_is_current
    ON ods.overpayments(is_current);

CREATE INDEX IF NOT EXISTS idx_overpayments_fetched_at
    ON ods.overpayments(fetched_at);

CREATE INDEX IF NOT EXISTS idx_overpayments_batch_id
    ON ods.overpayments(batch_id);

CREATE INDEX IF NOT EXISTS idx_overpayments_organisation_id
    ON ods.overpayments(organisation_id);

/* --- Trigger to maintain row_updated_at ----------------------- */
CREATE TRIGGER trg_update_overpayments_row_updated_at
BEFORE UPDATE ON ods.overpayments
FOR EACH ROW EXECUTE FUNCTION fn_update_row_updated_at();

/* --- Documentation ------------------------------------------- */
COMMENT ON TABLE ods.overpayments IS 'Overpayments issued or received, stored as Type‑2 slowly changing dimension rows.';
COMMENT ON COLUMN ods.overpayments.overpayment_id IS 'Natural identifier for an overpayment.';
COMMENT ON COLUMN ods.overpayments.amount_due IS 'Remaining amount due on the overpayment.';
COMMENT ON COLUMN ods.overpayments.is_current IS 'TRUE if this row represents the latest version of the overpayment.';