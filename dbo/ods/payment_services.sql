-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero PaymentServices
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑recommended).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: payment_service_id (UUID).
-- =============================================================

/* -------------------------------------------------------------
   ods.payment_services – Type‑2 Slowly Changing Dimensions table
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.payment_services (
    /* --- Business / natural key ----------------------------- */
    payment_service_id     UUID            NOT NULL,   -- Xero PaymentServiceID

    /* --- Tenant / organisation ------------------------------ */
    organisation_id        UUID            NOT NULL,

    /* --- Core scalar attributes ----------------------------- */
    name                   VARCHAR(255),
    payment_service_type   VARCHAR(32) CHECK (payment_service_type IN (
                                'PAYMENTGATEWAY',
                                'DIRECTDEBIT',
                                'BANKTRANSFER',
                                'CUSTOM'
                            )),
    payment_service_url    VARCHAR(2048),
    redirect_url           VARCHAR(2048),
    logo_url               VARCHAR(2048),
    pay_now_text           VARCHAR(100),
    account_number         VARCHAR(50),
    is_enabled             BOOLEAN,
    updated_date_utc       TIMESTAMPTZ,

    /* --- SCD‑2 infrastructure ------------------------------- */
    surrogate_key          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from             TIMESTAMPTZ NOT NULL,
    valid_to               TIMESTAMPTZ NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current             BOOLEAN     NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------- */
    fetched_at             TIMESTAMPTZ NOT NULL,
    row_created_at         TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at         TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status          ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ---------------------------- */
    batch_id                     UUID         NOT NULL,
    landing_table_name           VARCHAR(255) NOT NULL,
    landing_record_identifier    VARCHAR(512) NOT NULL,
    raw_table_name               VARCHAR(255),
    api_call_id                  UUID,
    source_system_id             VARCHAR(100),
    source_record_modified_at    TIMESTAMPTZ,

    /* --- Constraints ---------------------------------------- */
    CONSTRAINT uq_payment_services_business_key_current
        UNIQUE (payment_service_id, is_current) WHERE is_current,

    CONSTRAINT ck_payment_services_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_payment_services_valid_dates
        CHECK (valid_from < valid_to),

    /* --- Foreign Keys --------------------------------------- */
    CONSTRAINT fk_payment_services_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id)
);

/* --- Indexes -------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_payment_services_business_key_current
    ON ods.payment_services(payment_service_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_payment_services_valid_to
    ON ods.payment_services(valid_to);

CREATE INDEX IF NOT EXISTS idx_payment_services_is_current
    ON ods.payment_services(is_current);

CREATE INDEX IF NOT EXISTS idx_payment_services_fetched_at
    ON ods.payment_services(fetched_at);

CREATE INDEX IF NOT EXISTS idx_payment_services_batch_id
    ON ods.payment_services(batch_id);

CREATE INDEX IF NOT EXISTS idx_payment_services_organisation_id
    ON ods.payment_services(organisation_id);

/* --- Trigger to maintain row_updated_at --------------------- */
CREATE TRIGGER trg_update_payment_services_row_updated_at
BEFORE UPDATE ON ods.payment_services
FOR EACH ROW EXECUTE FUNCTION ods.fn_update_row_updated_at();

/* --- Documentation ----------------------------------------- */
COMMENT ON TABLE ods.payment_services IS 'Payment services configured for an organisation (e.g. PayPal, Stripe), captured as Type‑2 slowly changing dimensions.';
COMMENT ON COLUMN ods.payment_services.payment_service_id IS 'Natural identifier for the payment service.';
COMMENT ON COLUMN ods.payment_services.payment_service_type IS 'Classification of the service: PAYMENTGATEWAY, DIRECTDEBIT, BANKTRANSFER, CUSTOM.';
COMMENT ON COLUMN ods.payment_services.is_current IS 'TRUE if this row represents the latest version of the payment service.';
