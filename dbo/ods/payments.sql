-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero Payments
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: payment_id (UUID). One row per payment event.
--    * Parent linkage: invoice_id OR credit_note_id (optional), organisation_id (required).
-- =============================================================

/* -------------------------------------------------------------
   ods.payments – Type‑2 Slowly Changing Dimensions table
   ------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.payments (
    /* --- Business / natural key ------------------------------ */
    payment_id            UUID            NOT NULL,  -- Xero PaymentID

    /* --- Relationship / context keys ------------------------- */
    organisation_id       UUID            NOT NULL,
    invoice_id            UUID,
    credit_note_id        UUID,
    batch_payment_id      UUID,
    account_id            UUID,

    /* --- Core scalar attributes ------------------------------ */
    date                  TIMESTAMPTZ,
    currency_rate         NUMERIC(18,6) CHECK (currency_rate >= 0),
    amount                NUMERIC(18,2) CHECK (amount >= 0),
    bank_amount           NUMERIC(18,2) CHECK (bank_amount >= 0),
    reference             VARCHAR(255),
    payment_type          VARCHAR(20) CHECK (payment_type IN (
                            'ACCRECPAYMENT',
                            'ACCPAYPAYMENT',
                            'ARCREDITPAYMENT',
                            'APCREDITPAYMENT',
                            'RECOVEREDPAYMENT')),
    status                VARCHAR(12) CHECK (status IN ('AUTHORISED','DELETED','VOIDED')),
    has_account           BOOLEAN,
    is_reconciled         BOOLEAN,
    updated_date_utc      TIMESTAMPTZ,

    /* --- SCD‑2 infrastructure -------------------------------- */
    surrogate_key         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from            TIMESTAMPTZ NOT NULL,
    valid_to              TIMESTAMPTZ NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current            BOOLEAN     NOT NULL DEFAULT TRUE,

    /* --- Audit & status -------------------------------------- */
    fetched_at            TIMESTAMPTZ NOT NULL,
    row_created_at        TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at        TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status         ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking ----------------------------- */
    batch_id                     UUID         NOT NULL,
    landing_table_name           VARCHAR(255) NOT NULL,
    landing_record_identifier    VARCHAR(512) NOT NULL,
    raw_table_name               VARCHAR(255),
    api_call_id                  UUID,
    source_system_id             VARCHAR(100),
    source_record_modified_at    TIMESTAMPTZ,

    /* --- Constraints ----------------------------------------- */
    CONSTRAINT uq_payments_business_key_current
        UNIQUE (payment_id, is_current)
        WHERE is_current,

    CONSTRAINT ck_payments_record_status
        CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),

    CONSTRAINT ck_payments_valid_dates
        CHECK (valid_from < valid_to),

    /* --- Foreign Keys ---------------------------------------- */
    CONSTRAINT fk_payments_invoice
        FOREIGN KEY (invoice_id)
        REFERENCES ods.invoices(invoice_id),

    CONSTRAINT fk_payments_credit_note
        FOREIGN KEY (credit_note_id)
        REFERENCES ods.credit_notes(credit_note_id),

    CONSTRAINT fk_payments_batch_payment
        FOREIGN KEY (batch_payment_id)
        REFERENCES ods.batch_payments(batch_payment_id),

    CONSTRAINT fk_payments_account
        FOREIGN KEY (account_id)
        REFERENCES ods.accounts(account_id),

    CONSTRAINT fk_payments_organisation
        FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id)
);

/* --- Indexes -------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_payments_business_key_current
    ON ods.payments(payment_id) WHERE is_current;

CREATE INDEX IF NOT EXISTS idx_payments_invoice_id
    ON ods.payments(invoice_id);

CREATE INDEX IF NOT EXISTS idx_payments_credit_note_id
    ON ods.payments(credit_note_id);

CREATE INDEX IF NOT EXISTS idx_payments_batch_payment_id
    ON ods.payments(batch_payment_id);

CREATE INDEX IF NOT EXISTS idx_payments_valid_to
    ON ods.payments(valid_to);

CREATE INDEX IF NOT EXISTS idx_payments_is_current
    ON ods.payments(is_current);

CREATE INDEX IF NOT EXISTS idx_payments_fetched_at
    ON ods.payments(fetched_at);

CREATE INDEX IF NOT EXISTS idx_payments_batch_id
    ON ods.payments(batch_id);

CREATE INDEX IF NOT EXISTS idx_payments_organisation_id
    ON ods.payments(organisation_id);

/* --- Trigger to maintain row_updated_at ----------------------- */
CREATE TRIGGER trg_update_payments_row_updated_at
BEFORE UPDATE ON ods.payments
FOR EACH ROW EXECUTE FUNCTION fn_update_row_updated_at();

/* --- Documentation ------------------------------------------- */
COMMENT ON TABLE ods.payments IS 'Top‑level payment records from Xero, stored as Type‑2 slowly changing dimension records.';
COMMENT ON COLUMN ods.payments.payment_id IS 'Natural identifier for a payment.';
COMMENT ON COLUMN ods.payments.invoice_id IS 'Optional link to the invoice this payment relates to.';
COMMENT ON COLUMN ods.payments.credit_note_id IS 'Optional link to the credit note this payment relates to.';
COMMENT ON COLUMN ods.payments.amount IS 'Amount of the payment in the invoice currency.';
COMMENT ON COLUMN ods.payments.payment_type IS 'Payment type code from Xero (e.g. ACCRECPAYMENT).';
COMMENT ON COLUMN ods.payments.is_current IS 'TRUE if this row represents the current version of the payment record.';
