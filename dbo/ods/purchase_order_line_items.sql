-- =============================================================
--  ODS SCD‑2 DDL SCRIPT – Xero PurchaseOrderLineItems
--  Generated: 28‑May‑2025
--  Notes:
--    * Surrogate key uses BIGINT IDENTITY (PostgreSQL‑preferred).
--    * Assumes ods.record_status_enum and fn_update_row_updated_at() already exist.
--    * Business key: line_item_id (UUID).
--    * Parent linkage: purchase_order_id + organisation_id; FK to ods.purchase_orders.
--    * Tracking array not expanded here – request a `purchase_order_line_item_tracking` table if required.
-- =============================================================

/* -----------------------------------------------------------------
   ods.purchase_order_line_items – Type‑2 Slowly Changing Dimensions
   ----------------------------------------------------------------- */
CREATE TABLE IF NOT EXISTS ods.purchase_order_line_items (
    /* --- Business / natural key ---------------------------------- */
    line_item_id                UUID            NOT NULL,   -- Xero LineItemID

    /* --- Parent / tenant linkage --------------------------------- */
    purchase_order_id           UUID            NOT NULL,
    organisation_id             UUID            NOT NULL,

    /* --- Core scalar attributes ---------------------------------- */
    item_code                   VARCHAR(50),
    description                 VARCHAR(4000),
    quantity                    NUMERIC(18,2)   CHECK (quantity >= 0),
    unit_amount                 NUMERIC(18,2)   CHECK (unit_amount >= 0),
    discount_rate               NUMERIC(5,2)    CHECK (discount_rate >= 0 AND discount_rate <= 100),
    discount_amount             NUMERIC(18,2)   CHECK (discount_amount >= 0),
    tax_type                    VARCHAR(50),
    tax_amount                  NUMERIC(18,2)   CHECK (tax_amount >= 0),
    line_amount                 NUMERIC(18,2)   CHECK (line_amount >= 0),
    account_code                VARCHAR(10)     CHECK (account_code ~ '^[A-Z0-9]{1,10}$'),
    tracking_category_id        UUID,
    tracking_option_id          UUID,

    /* --- SCD‑2 infrastructure ------------------------------------ */
    surrogate_key               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valid_from                  TIMESTAMPTZ NOT NULL,
    valid_to                    TIMESTAMPTZ NOT NULL DEFAULT '9999-12-31 23:59:59.999999+00',
    is_current                  BOOLEAN NOT NULL DEFAULT TRUE,

    /* --- Audit & status ------------------------------------------ */
    fetched_at                  TIMESTAMPTZ NOT NULL,
    row_created_at              TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    row_updated_at              TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    record_status               ods.record_status_enum NOT NULL DEFAULT 'ACTIVE',

    /* --- Batch / source tracking --------------------------------- */
    batch_id                    UUID         NOT NULL,
    landing_table_name          VARCHAR(255) NOT NULL,
    landing_record_identifier   VARCHAR(512) NOT NULL,
    raw_table_name              VARCHAR(255),
    api_call_id                 UUID,
    source_system_id            VARCHAR(100),
    source_record_modified_at   TIMESTAMPTZ,

    /* --- Constraints --------------------------------------------- */
    CONSTRAINT uq_po_line_items_business_key_current UNIQUE (line_item_id, is_current) WHERE is_current,

    CONSTRAINT ck_po_li_record_status CHECK (record_status IN ('ACTIVE','SUPERSEDED','ARCHIVED','REMOVED')),
    CONSTRAINT ck_po_li_valid_dates   CHECK (valid_from < valid_to),

    /* --- Foreign Keys -------------------------------------------- */
    CONSTRAINT fk_po_li_purchase_order FOREIGN KEY (purchase_order_id)
        REFERENCES ods.purchase_orders(purchase_order_id),
    CONSTRAINT fk_po_li_org FOREIGN KEY (organisation_id)
        REFERENCES ods.organisations(organisation_id)
);

/* --- Indexes ---------------------------------------------------- */
CREATE INDEX IF NOT EXISTS idx_po_li_business_key_current ON ods.purchase_order_line_items(line_item_id) WHERE is_current;
CREATE INDEX IF NOT EXISTS idx_po_li_purchase_order_id   ON ods.purchase_order_line_items(purchase_order_id);
CREATE INDEX IF NOT EXISTS idx_po_li_valid_to            ON ods.purchase_order_line_items(valid_to);
CREATE INDEX IF NOT EXISTS idx_po_li_is_current          ON ods.purchase_order_line_items(is_current);
CREATE INDEX IF NOT EXISTS idx_po_li_fetched_at          ON ods.purchase_order_line_items(fetched_at);
CREATE INDEX IF NOT EXISTS idx_po_li_batch_id            ON ods.purchase_order_line_items(batch_id);
CREATE INDEX IF NOT EXISTS idx_po_li_org_id              ON ods.purchase_order_line_items(organisation_id);

/* --- Trigger to maintain row_updated_at ------------------------- */
CREATE TRIGGER trg_update_po_li_row_updated_at
BEFORE UPDATE ON ods.purchase_order_line_items
FOR EACH ROW EXECUTE FUNCTION fn_update_row_updated_at();

/* --- Documentation --------------------------------------------- */
COMMENT ON TABLE ods.purchase_order_line_items IS 'Line items for Xero Purchase Orders with Type‑2 SCD history (one row per line item version).';
COMMENT ON COLUMN ods.purchase_order_line_items.line_item_id IS 'Natural business key (Xero LineItemID).';
COMMENT ON COLUMN ods.purchase_order_line_items.account_code IS 'GL account code associated with the line item.';
